user  nobody;
worker_processes  1;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;

pid        logs/nginx.pid;


events {
    multi_accept        on;
    worker_connections  8192;
}


http {
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    tcp_nopush     on;
    keepalive_timeout  65;

    gzip  on;

    upstream app {
            server 127.0.0.1:8400;
            keepalive 256;
    }


    server {
        listen 80;
        listen 443 ssl http2;
        server_name conductor 127.0.0.1;

        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;

        ssl_certificate           ssl/fullchain.pem;
        ssl_certificate_key       ssl/privkey.pem;
        ssl_dhparam               ssl/dhparam.pem;
        ssl_protocols             TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_ciphers               "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";
        ssl_ecdh_curve            secp384r1;
        ssl_session_cache         shared:SSL:10m;
        ssl_session_tickets       off;

        if ($scheme = http) {
            set $redirect_to_https false;
        }

        if ($http_x_forwarded_proto != "https") {
            set $redirect_to_https false;
        }

        if ($hostname = conductor-dev) {
            set $redirect_to_https false;
        }

        if ($request_uri = /healthz) {
            # Allow health checks on both port 80 and 443.
            set $redirect_to_https false;
        }

        if ($redirect_to_https = true) {
            rewrite ^(.*) https://$host$1;
        }

        # Health check
        location /healthz {
            add_header Content-Type text/plain;
            return 200 OK;
        }

        # API
        location /api {
            proxy_pass http://app;
        }

        # Swagger docs
        location /api/help {
            try_files '' /api/help/index.html;
        }

        location ~ ^/api/help/(.+)$ {
            alias /app/swagger/$1;
        }

        # Favicon
        location = /favicon.ico {
            root frontend/images/;
        }

        # Generated static content
        location = /gen/bundle.js {
            # Force cache revalidation.
            add_header Cache-Control 'public, max-age=0, must-revalidate';
            root frontend/;
        }

        location ~ ^/gen/.*$ {
            root frontend/;
        }

        # Web UI static content
        location ~ .+\.(html|css|js|ico|png|svg|ttf|eot|woff2?)$ {
            root frontend/;
            try_files $uri /gen$uri;
        }

        # Web UI root
        location / {
            try_files frontend /index.html;
            
        }
    }
}
